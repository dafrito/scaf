#!/bin/bash
PATH=/bin:/usr/bin

die() {
    echo $* >&2
    exit 1
}

# A (hopefully) usable link to the scaf executable
export SCAF=$0
if [ ! -x $SCAF ]; then
    die "No valid path to scaf. SCAF: $SCAF";
fi

# The root directory for scaf. In installed configurations, this
# won't be as necessary, since we'll use /usr/share for scaffold
# data and /usr/bin for scaf itself.
scafdir=$HOME/src/scaf
if [ ! -d "$scafdir" ]; then
    die "No valid path to scaf's root directory. Attempted: $scafdir"
fi;

# A directory that contains all of scaf's supported types.
scaffolds=$scafdir/types.d
if [ ! -d "$scaffolds" ]; then
    die "No valid path to scaf's types.d directory. Attempted: $scaffolds"
fi;

# A directory that contains data used by scaf's types. Used by
# supported clients, so it must be exported.
export SCAFDATA=$scafdir/data
if [ ! -d "$SCAFDATA" ]; then
    die "No valid path to scaf's data directory. Attempted: $SCAFDATA"
fi;

usage() {
    echo "USAGE: scaf [TYPE] FILE [OPTIONS...]" >&2
}

if [ "$#" -eq 0 ]; then
    usage
    die "No scaffold provided."
fi;

# The chosen scaffold type
export SCAFFOLD_TYPE=$1
shift

if [ "$#" -eq 0 ]; then
    # TODO Implement some automatic type detection, so things like:
    # $ scaf foo.cpp
    # can be supported without needing to provide redundant information.
    case "$SCAFFOLD_TYPE" in
        *.hpp|*.cpp|*.cxx|*.hxx|*.C|*.H)
            target=$SCAFFOLD_TYPE
            SCAFFOLD_TYPE=cpp
        ;;
        *)
        usage
        die "No target file provided."
        ;;
    esac;
else
    target=$1
    shift;
fi;

scaffold=$scaffolds/$SCAFFOLD_TYPE
[ -x $scaffold ] || die "No scaffold for type: $type"


# TODO Load .scafrc files in this order:
# /etc/scafrc
# /home/dafrito/.scafrc
# And in every directory including the current (with /.scafrc first, to the
# current directory last)

source $scaffold $target $*;

# vim: set ts=4 sw=4 et :
